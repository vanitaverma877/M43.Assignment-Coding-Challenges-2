
M43.Assignment Coding Challenges 2

#Coding Challenges Assignment Questions

........................................................................

Q1. Count the occurrences.
You are building a word count generator that will take a large string of text 
as input and output the words and the number of times they are present in 
the string. Your task is to write a function that can count the occurrences 
of each word in the string and return a Map containing each word's count. 
For simplicity, you can assume that the string only contains alphabetic 
characters and spaces.

Q2. Only unique items are allowed.
You are building a program that takes an array of numbers as input and you 
need to remove all the duplicates from the array. You want to write a function 
that can accomplish this task efficiently and returns a new set that contains 
only the unique elements.

Q3. Swap the values.
You are working on a project that requires you to swap the values of two 
variables without using a temporary variable. You decide to write a function 
that takes two variables as input and swaps their values using destructuring 
assignment with an array. The function should take the two variables as 
arguments, destructure them into an array, and then swap their positions within 
the array. Finally, the function should return an array with the swapped values. 
For example, if the function is called with the arguments x = 5 and y = 10, it 
should return an array [10, 5] with x now equal to 10 and y equal to 5.

Q4. Access random elements.
You are building a program that takes an array of numbers as input and you 
need to extract the first, second, and last elements of the array. You decide 
to write a function that can accomplish this task using destructuring assignment 
with an array. The function should take the array as an argument, destructure it 
into three variables representing the first, second, and last elements, and then 
return an array with these three values. For example, if the input array is 
[1, 2, 3, 4, 5], the function should return an array [1, 2, 5].

Q5. Min and max values.
You are building a program that needs to find the maximum and minimum values 
in an array of numbers. You decide to write a function that can accomplish this 
task by taking an array of numbers as input and using the spread operator with 
the Math methods max() and min(). The function should return an object with 
two properties, max, and min, representing the maximum and minimum values in 
the input array, respectively. For example, if the input array is 
[5, 2, 7, 1, 9], the function should return an object { max: 9, min: 1 }.

Q6. Nested Objects.
Write a function that takes an object representing a person as input, and 
extracts the name and street properties from a nested object using object 
destructuring. The function should return an object with these two properties. 
A sample object is given below.

...........................................................................

Q1. Count the occurrences.
You are building a word count generator that will take a large string of text 
as input and output the words and the number of times they are present in 
the string. Your task is to write a function that can count the occurrences 
of each word in the string and return a Map containing each word's count. 
For simplicity, you can assume that the string only contains alphabetic 
characters and spaces.

A.To create a function that counts the occurrences of each word in a given string and returns a `Map` containing the count of each word, you can follow these steps:

1. **Split the String into Words:** Use a string method like `split()` to divide the text into individual words.
2. **Count the Occurrences:** Iterate over the words and keep a count of each word using a `Map`.
3. **Return the Map:** Finally, return the `Map` which will hold each word as the key and its count as the value.

Here's a complete implementation:

### JavaScript Code

```javascript
function countOccurrences(text) {
    // Create a Map to store the count of each word
    const wordCountMap = new Map();
    
    // Split the text into words using space as a delimiter
    const words = text.split(/\s+/);

    // Iterate over each word in the array
    words.forEach(word => {
        // If the word is not in the map, add it with count 1
        if (wordCountMap.has(word)) {
            wordCountMap.set(word, wordCountMap.get(word) + 1);
        } else {
            wordCountMap.set(word, 1);
        }
    });

    // Return the map containing the count of each word
    return wordCountMap;
}

// Example usage:
const text = "hello world hello";
const wordCounts = countOccurrences(text);

console.log("Word Counts:");
wordCounts.forEach((count, word) => {
    console.log(`${word}: ${count}`);
});
```

### Explanation:

1. **Split the String:** The `split(/\s+/)` method splits the input text into words based on whitespace. The regular expression `\s+` handles multiple spaces between words.

2. **Count Occurrences:**
   - **Check Existence:** Use `wordCountMap.has(word)` to check if the word is already in the `Map`.
   - **Update Count:** If it is present, update the count using `wordCountMap.set(word, wordCountMap.get(word) + 1)`.
   - **Add New Word:** If it is not present, add it to the `Map` with a count of `1`.

3. **Return the `Map`:** The `Map` is returned, where each word is a key and its count is the value.

### Example Output:

For the input string `"hello world hello"`, the output would be:

```
Word Counts:
hello: 2
world: 1
```

This code demonstrates how to use a `Map` to count occurrences efficiently, handling text input and providing an easy way to retrieve word counts.

...........................................................................

Q2. Only unique items are allowed.
You are building a program that takes an array of numbers as input and you 
need to remove all the duplicates from the array. You want to write a function 
that can accomplish this task efficiently and returns a new set that contains 
only the unique elements.

A.To create a function that removes duplicates from an array and returns a new set with only unique elements, you can use JavaScript's `Set` object. A `Set` is a built-in data structure that stores unique values. By converting an array to a `Set`, duplicates are automatically removed.

Here’s a step-by-step implementation:

1. **Create a Set from the Array:** Convert the array to a `Set`, which will automatically filter out duplicate values.
2. **Return the Set:** Return the new `Set` that contains only unique elements.

### JavaScript Code

```javascript
function removeDuplicates(arr) {
    // Create a Set from the array to remove duplicates
    const uniqueSet = new Set(arr);
    
    // Return the Set containing only unique elements
    return uniqueSet;
}

// Example usage:
const numbers = [1, 2, 2, 3, 4, 4, 5];
const uniqueNumbers = removeDuplicates(numbers);

console.log("Unique Numbers:");
console.log([...uniqueNumbers]); // Convert Set to array for display
```

### Explanation:

1. **Create a Set:**
   - `new Set(arr)` creates a `Set` from the array `arr`. The `Set` object automatically removes duplicate values.

2. **Return the Set:**
   - The `Set` is returned from the function. If you need to display or use the unique values in array format, you can convert the `Set` back to an array using the spread operator `[...uniqueSet]`.

### Example Output:

For the input array `[1, 2, 2, 3, 4, 4, 5]`, the output will be:

```
Unique Numbers:
[1, 2, 3, 4, 5]
```

### Alternative Using `Array.filter` (If Not Using `Set`):

If you prefer not to use `Set`, you can achieve similar results using the `filter` method in combination with `indexOf`:

```javascript
function removeDuplicates(arr) {
    return arr.filter((item, index) => arr.indexOf(item) === index);
}

// Example usage:
const numbers = [1, 2, 2, 3, 4, 4, 5];
const uniqueNumbers = removeDuplicates(numbers);

console.log("Unique Numbers:");
console.log(uniqueNumbers);
```

In this alternative approach:
- `arr.indexOf(item) === index` ensures that only the first occurrence of each item is included in the result.

However, using `Set` is generally more efficient and concise for this purpose.

...........................................................................

Q3. Swap the values.
You are working on a project that requires you to swap the values of two 
variables without using a temporary variable. You decide to write a function 
that takes two variables as input and swaps their values using destructuring 
assignment with an array. The function should take the two variables as 
arguments, destructure them into an array, and then swap their positions within 
the array. Finally, the function should return an array with the swapped values. 
For example, if the function is called with the arguments x = 5 and y = 10, it 
should return an array [10, 5] with x now equal to 10 and y equal to 5.

A.To swap the values of two variables without using a temporary variable, you can use destructuring assignment in JavaScript. Destructuring allows you to unpack values from arrays or objects into distinct variables, and it can be used effectively for swapping values.

Here’s how you can write a function to swap two values using destructuring assignment with an array:

### JavaScript Code

```javascript
function swapValues(a, b) {
    // Use destructuring assignment to swap values
    [a, b] = [b, a];
    
    // Return an array with the swapped values
    return [a, b];
}

// Example usage:
const x = 5;
const y = 10;
const swapped = swapValues(x, y);

console.log("Swapped Values:");
console.log(swapped); // Output: [10, 5]
```

### Explanation:

1. **Destructuring Assignment:**
   - `[a, b] = [b, a];` uses array destructuring to swap the values. The right side of the assignment `[b, a]` creates an array with `b` and `a`, and then this array is destructured into `a` and `b` on the left side, effectively swapping their values.

2. **Return the Swapped Values:**
   - The function returns an array `[a, b]` containing the swapped values.

### Example Output:

For the input values `x = 5` and `y = 10`, the output will be:

```
Swapped Values:
[10, 5]
```

This method is efficient and concise, leveraging JavaScript's destructuring assignment to achieve the swap without the need for a temporary variable.

...........................................................................

Q4. Access random elements.
You are building a program that takes an array of numbers as input and you 
need to extract the first, second, and last elements of the array. You decide 
to write a function that can accomplish this task using destructuring assignment 
with an array. The function should take the array as an argument, destructure it 
into three variables representing the first, second, and last elements, and then 
return an array with these three values. For example, if the input array is 
[1, 2, 3, 4, 5], the function should return an array [1, 2, 5].

A.To extract the first, second, and last elements from an array using destructuring assignment in JavaScript, you can follow these steps:

1. **Destructure the Array:**
   - Extract the first and second elements directly using destructuring.
   - Extract the last element using array indexing.

2. **Return the Result:**
   - Combine the extracted elements into a new array.

Here’s how you can write a function to achieve this:

### JavaScript Code

```javascript
function accessRandomElements(arr) {
    // Ensure the array has at least 2 elements to avoid errors
    if (arr.length < 2) {
        throw new Error("Array must have at least two elements.");
    }

    // Destructure the first and second elements, and access the last element
    const [first, second] = arr;
    const last = arr[arr.length - 1];
    
    // Return an array containing the first, second, and last elements
    return [first, second, last];
}

// Example usage:
const numbers = [1, 2, 3, 4, 5];
const result = accessRandomElements(numbers);

console.log("Extracted Elements:");
console.log(result); // Output: [1, 2, 5]
```

### Explanation:

1. **Destructuring Assignment:**
   - `[first, second] = arr;` extracts the first and second elements from the array.
   - `const last = arr[arr.length - 1];` accesses the last element using the length of the array.

2. **Error Handling:**
   - The function checks if the array has at least two elements to ensure it’s valid for extraction. If not, an error is thrown.

3. **Return the Result:**
   - The function returns an array containing the first, second, and last elements.

### Example Output:

For the input array `[1, 2, 3, 4, 5]`, the output will be:

```
Extracted Elements:
[1, 2, 5]
```

This method effectively uses destructuring and indexing to achieve the desired result.

...........................................................................

Q5. Min and max values.
You are building a program that needs to find the maximum and minimum values 
in an array of numbers. You decide to write a function that can accomplish this 
task by taking an array of numbers as input and using the spread operator with 
the Math methods max() and min(). The function should return an object with 
two properties, max, and min, representing the maximum and minimum values in 
the input array, respectively. For example, if the input array is 
[5, 2, 7, 1, 9], the function should return an object { max: 9, min: 1 }.

A.To find the maximum and minimum values in an array of numbers using the `Math.max()` and `Math.min()` methods along with the spread operator, follow these steps:

1. **Use the Spread Operator:**
   - The spread operator (`...`) allows you to pass array elements as individual arguments to a function.

2. **Apply `Math.max()` and `Math.min()`:**
   - Use `Math.max()` to find the maximum value.
   - Use `Math.min()` to find the minimum value.

3. **Return the Result:**
   - Return an object containing the maximum and minimum values.

Here's how you can write the function:

### JavaScript Code

```javascript
function findMinMax(arr) {
    // Check if the array is empty and handle accordingly
    if (arr.length === 0) {
        throw new Error("Array cannot be empty.");
    }
    
    // Find the maximum and minimum values using Math.max() and Math.min() with the spread operator
    const max = Math.max(...arr);
    const min = Math.min(...arr);
    
    // Return an object with max and min properties
    return { max, min };
}

// Example usage:
const numbers = [5, 2, 7, 1, 9];
const result = findMinMax(numbers);

console.log("Min and Max Values:");
console.log(result); // Output: { max: 9, min: 1 }
```

### Explanation:

1. **Handling Edge Cases:**
   - The function checks if the input array is empty and throws an error if it is. This prevents the use of `Math.max()` and `Math.min()` with an empty array, which would return `-Infinity` and `Infinity`, respectively.

2. **Using the Spread Operator:**
   - `Math.max(...arr)` and `Math.min(...arr)` spread the array elements as individual arguments to these methods, allowing them to compute the maximum and minimum values.

3. **Returning the Result:**
   - The function returns an object with `max` and `min` properties holding the respective values.

### Example Output:

For the input array `[5, 2, 7, 1, 9]`, the output will be:

```
Min and Max Values:
{ max: 9, min: 1 }
```

This approach effectively utilizes JavaScript's built-in `Math` methods and the spread operator to find and return the maximum and minimum values from an array.

...........................................................................

Q6. Nested Objects.
Write a function that takes an object representing a person as input, and 
extracts the name and street properties from a nested object using object 
destructuring. The function should return an object with these two properties. 
A sample object is given below.

A.To extract specific properties from a nested object using object destructuring, follow these steps:

1. **Define the Input Object Structure:**
   - Assume the object has a nested structure where the `name` and `street` properties are within different levels.

2. **Use Object Destructuring:**
   - Destructure the object to extract the `name` and `street` properties.

3. **Return the Result:**
   - Return a new object containing the extracted properties.

Here's a step-by-step example:

### Example JavaScript Code

```javascript
function extractDetails(person) {
    // Destructure the nested object to extract `name` and `street`
    const { name, address: { street } } = person;

    // Return an object containing the extracted properties
    return { name, street };
}

// Example usage:
const person = {
    name: 'John Doe',
    age: 30,
    address: {
        street: '123 Main St',
        city: 'Anytown',
        zip: '12345'
    }
};

const result = extractDetails(person);

console.log(result); // Output: { name: 'John Doe', street: '123 Main St' }
```

### Explanation:

1. **Input Object Structure:**
   - The input object `person` has properties at different levels: `name` is at the top level, and `street` is nested within the `address` property.

2. **Object Destructuring:**
   - `const { name, address: { street } } = person;` uses destructuring to directly extract `name` from the top level and `street` from the `address` property.

3. **Return Object:**
   - `{ name, street }` creates a new object containing the extracted properties and returns it.

### Explanation of Destructuring:

- `name` is directly destructured from the top level of the `person` object.
- `address: { street }` destructures the `street` property from the nested `address` object.

This approach is clean and efficient for extracting properties from nested objects and works well with structured data.

...........................................................................





